import distutils.sysconfig
import numpy

#TODOS
# 1) treat c++ warnings as errors
# 2) create debug and release configurations

###############################################################################
install_path = '#../rftk/native'

try:
    numpy_include = numpy.get_include()
except AttributeError:
    numpy_include = numpy.get_numpy_include()

# CCFLAGS=['-O0', '-g']
# '-Werror',
env = Environment(SWIGFLAGS=['-python', '-c++', '-Werror', '-w490', '-w362'],
                  CPPPATH=[distutils.sysconfig.get_python_inc(), numpy_include],
                  SHLIBPREFIX='',
                  CCFLAGS=['-O3'],
                  LIBPATH=['.'],
                  RPATH=['.', GetBuildPath(install_path)])

if env['PLATFORM'] == 'darwin':
    env['SHLINKFLAGS'] = '-bundle -flat_namespace -undefined suppress'
    env['SHLIBSUFFIX'] = '.so'


###############################################################################
# helpers to reduce code duplication
def ignore_on_darwin(env_warnings, l):
    if env_warnings['PLATFORM'] == 'darwin':
        l = []
    return l


def build_swig_module(env, non_swig_warnings, module_name, include_depends, link_depends):
    env_with_depends = env.Clone()
    env_with_depends.Append(SWIGFLAGS=['-I%s' % x for x in include_depends], CPPPATH=include_depends)
    swig_objs = env_with_depends.SharedObject('%s/%s.i' % (module_name, module_name))
    env_with_warnings = env_with_depends.Clone()
    env_with_warnings.Append(CCFLAGS=non_swig_warnings)
    shared_lib = env_with_warnings.SharedLibrary(target=('_%s' % module_name),
                                        source=[Glob('%s/*.cpp' % module_name)] + swig_objs,
                                        LIBS=ignore_on_darwin(env_with_warnings, link_depends))
    env_with_warnings.Alias(module_name, shared_lib)
    return shared_lib

non_swig_warnings = ['-Wall', '-Wextra', '-Weffc++', '-Werror']

###############################################################################
# assert_utils shared lib
assert_utils_sharedlib = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        module_name='assert_util',
                                        include_depends=[],
                                        link_depends=[])


###############################################################################
# bootstrap shared lib
bootstrap_sharedlib = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        module_name='bootstrap',
                                        include_depends=['assert_util'],
                                        link_depends=[assert_utils_sharedlib])


###############################################################################
# buffers shared lib
buffers_sharedlib = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        module_name='buffers',
                                        include_depends=['assert_util'],
                                        link_depends=[assert_utils_sharedlib])


###############################################################################
# best split shared lib
best_split_sharedlib = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        module_name='best_split',
                                        include_depends=['assert_util', 'bootstrap', 'buffers'],
                                        link_depends=[assert_utils_sharedlib, bootstrap_sharedlib, buffers_sharedlib])


###############################################################################
# forest data shared lib
forest_data_sharedlib = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        module_name='forest_data',
                                        include_depends=['assert_util', 'buffers'],
                                        link_depends=[assert_utils_sharedlib, buffers_sharedlib])


###############################################################################
# features shared lib
features_sharedlib = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        module_name='features',
                                        include_depends=['assert_util', 'buffers'],
                                        link_depends=[assert_utils_sharedlib, buffers_sharedlib])


###############################################################################
# feature extractors shared lib
feature_extractors_sharedlib = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        module_name='feature_extractors',
                                        include_depends=['assert_util', 'bootstrap', 'buffers', 'features'],
                                        link_depends=[assert_utils_sharedlib, bootstrap_sharedlib, buffers_sharedlib, features_sharedlib])


###############################################################################
# predict shared lib
predict_sharedlib = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        module_name='predict',
                                        include_depends=['assert_util', 'buffers', 'forest_data', 'features'],
                                        link_depends=[assert_utils_sharedlib, buffers_sharedlib, forest_data_sharedlib, features_sharedlib])



###############################################################################
# train shared lib
train_sharedlib = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        module_name='train',
                                        include_depends=['assert_util', 'buffers',
                                                        'bootstrap', 'best_split',
                                                        'forest_data', 'feature_extractors',
                                                        'predict'],
                                        link_depends=[assert_utils_sharedlib, buffers_sharedlib,
                                                    bootstrap_sharedlib, best_split_sharedlib,
                                                    forest_data_sharedlib, feature_extractors_sharedlib,
                                                    predict_sharedlib])

# Install shared libraries and python wrappers
env.Install(install_path, [assert_utils_sharedlib,
                            'assert_util/assert_util.py',
                            bootstrap_sharedlib,
                            'bootstrap/bootstrap.py',
                            buffers_sharedlib,
                            'buffers/buffers.py',
                            best_split_sharedlib,
                            'best_split/best_split.py',
                            forest_data_sharedlib,
                            'forest_data/forest_data.py',
                            features_sharedlib,
                            'features/features.py',
                            feature_extractors_sharedlib,
                            'feature_extractors/feature_extractors.py',
                            predict_sharedlib,
                            'predict/predict.py',
                            train_sharedlib,
                            'train/train.py'])
env.Alias('install', install_path)
