import distutils.sysconfig
import numpy

###############################################################################
# setup variant specific params
Import('install_path')
Import('variant')
if variant == 'debug':
    ccflags = ['-g', '-O0']
    cppdefines = {'ENABLE_EXCEPTIONS': 1}
elif variant == 'release':
    ccflags = ['-O3']
    cppdefines = {'ENABLE_EXCEPTIONS': 0}

###############################################################################
try:
    numpy_include = numpy.get_include()
except AttributeError:
    numpy_include = numpy.get_numpy_include()

###############################################################################
env = Environment(SWIGFLAGS=['-python', '-c++', '-Werror', '-w490', '-w362'],
                  CPPPATH=[distutils.sysconfig.get_python_inc(), numpy_include],
                  SHLIBPREFIX='',
                  CCFLAGS=ccflags,
                  CPPDEFINES=cppdefines,
                  LIBPATH=[Dir('.').abspath],
                  RPATH=[Dir(install_path).abspath]
                  )
non_swig_warnings = ['-Wall', '-Wextra', '-Weffc++', '-Werror']

###############################################################################
def build_swig_module(env, non_swig_warnings, variant_name, module_name, depends):
    env_with_warnings = env.Clone()

    if env_with_warnings['PLATFORM'] == 'darwin':
        install_dylib_path_abspath = '-install_name %s/lib%s.dylib' % (Dir(install_path).abspath, module_name)
        env_with_warnings['SHLINKFLAGS'] = '-dynamiclib %s' % install_dylib_path_abspath

    env_with_warnings.Append(CCFLAGS=non_swig_warnings, CPPPATH=depends)
    shared_lib = env_with_warnings.SharedLibrary(target=('lib%s' % module_name),
                                        source=[Glob('%s/*.cpp' % module_name)],
                                        LIBS=depends)
    [Depends(shared_lib, d) for d in depends]

    env_with_depends = env.Clone()
    env_with_depends.Append(CPPPATH=depends,
                            SWIGFLAGS=['-I%s/%s' % (Dir('.').abspath, x) for x in depends])

    if env_with_depends['PLATFORM'] == 'darwin':
        env_with_depends['SHLINKFLAGS'] = '-bundle -flat_namespace -undefined suppress'
        env_with_depends['SHLIBSUFFIX'] = '.so'

    python_lib = env_with_depends.SharedLibrary(target=('_%s' % module_name),
                                        source=['%s/%s.i' % (module_name, module_name)],
                                        LIBS=module_name)
    Depends(python_lib, shared_lib)

    env_with_warnings.Alias('%s-%s' % (module_name, variant_name), python_lib)
    return shared_lib, python_lib, '%s/%s.py' % (module_name, module_name)



files_to_install = []
###############################################################################
# assert_utils shared lib
assert_utils_sharedlib, assert_utils_pylib, assert_utils_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='assert_util',
                                        depends=[])
files_to_install.extend([assert_utils_sharedlib, assert_utils_pylib, assert_utils_py])


###############################################################################
# bootstrap shared lib
bootstrap_sharedlib, bootstrap_pylib, bootstrap_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='bootstrap',
                                        depends=['assert_util'])
files_to_install.extend([bootstrap_sharedlib, bootstrap_pylib, bootstrap_py])


###############################################################################
# buffers shared lib
buffers_sharedlib, buffers_pylib, buffers_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='buffers',
                                        depends=['assert_util'])
files_to_install.extend([buffers_sharedlib, buffers_pylib, buffers_py])


###############################################################################
# best split shared lib
best_split_sharedlib, best_split_pyib, best_split_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='best_split',
                                        depends=['assert_util', 'bootstrap', 'buffers'])
files_to_install.extend([best_split_sharedlib, best_split_pyib, best_split_py])

###############################################################################
# forest data shared lib
forest_data_sharedlib, forest_data_pylib, forest_data_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='forest_data',
                                        depends=['assert_util', 'buffers'])
files_to_install.extend([forest_data_sharedlib, forest_data_pylib, forest_data_py])

###############################################################################
# features shared lib
features_sharedlib, features_pylib, features_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='features',
                                        depends=['assert_util', 'buffers'])
files_to_install.extend([features_sharedlib, features_pylib, features_py])

###############################################################################
# feature extractors shared lib
feature_extractors_sharedlib, feature_extractors_pylib, feature_extractors_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='feature_extractors',
                                        depends=['assert_util', 'bootstrap', 'buffers', 'features'])
files_to_install.extend([feature_extractors_sharedlib, feature_extractors_pylib, feature_extractors_py])

###############################################################################
# predict shared lib
predict_sharedlib, predict_pylib, predict_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='predict',
                                        depends=['assert_util', 'buffers', 'forest_data', 'features'])
files_to_install.extend([predict_sharedlib, predict_pylib, predict_py])


###############################################################################
# train shared lib
train_sharedlib, train_pylib, train_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='train',
                                        depends=['assert_util', 'buffers',
                                                        'bootstrap', 'best_split',
                                                        'forest_data', 'feature_extractors',
                                                        'predict'])
files_to_install.extend([train_sharedlib, train_pylib, train_py])

# Install shared libraries and python wrappers
env.Install(install_path, source=files_to_install)
env.Alias('install-%s'%variant, install_path)
