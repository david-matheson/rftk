import distutils.sysconfig
import numpy

###############################################################################
# setup variant specific params
Import('install_path')
Import('variant')

if variant == 'debug':
    ccflags = ['-g', '-O0']
    cppdefines = {'ENABLE_EXCEPTIONS': 1, 'USE_BOOST_THREAD':0}
elif variant == 'release':
    ccflags = ['-O3']
    cppdefines = {'ENABLE_EXCEPTIONS': 0, 'USE_BOOST_THREAD':1}

###############################################################################
try:
    numpy_include = numpy.get_include()
except AttributeError:
    numpy_include = numpy.get_numpy_include()

###############################################################################
boost_path = Dir('/home/davidm/projects/boost_install').abspath
env = Environment(
                  CC='gcc',
                  CXX='g++',
                  SWIGFLAGS=['-python', '-c++', '-Werror', '-w490', '-w362'],
                  CPPPATH=[distutils.sysconfig.get_python_inc(), numpy_include],
                  CCFLAGS=ccflags + ['-isystem%s/include' % boost_path],
                  CPPDEFINES=cppdefines,
                  LIBPATH=[Dir('.').abspath, boost_path + "/lib"],
                  RPATH=['%s/lib' % Dir(install_path).abspath, boost_path + "/lib"]
                  )

non_swig_warnings = ['-Wall', '-Wextra', '-Weffc++', '-Werror']

###############################################################################
def build_rftk_module(env, non_swig_warnings, variant_name, module_name, depends, external_libs):
    env_module = env.Clone()

    if env_module['PLATFORM'] == 'darwin':
        env_module['SHLINKFLAGS'] = '-dynamiclib -install_name %s/lib/lib%s.dylib' % (Dir(install_path).abspath, module_name)

    env_module.Append(CCFLAGS=non_swig_warnings, CPPPATH=['%s/native' % d for d in depends])
    shared_lib = env_module.SharedLibrary(target=module_name,
                                        source=[Glob('%s/native/*.cpp' % module_name)],
                                        LIBS=depends+external_libs)
    env_module.Alias('%s-%s-lib' % (module_name, variant_name), shared_lib)

    env_python_wrapper = env.Clone()
    cpppath = ['%s/%s/native' % (Dir('.').abspath, d) for d in depends + [module_name]]
    swigflags = ['-I%s/%s/native' % (Dir('.').abspath, d) for d in depends + [module_name]]
    swigflags += ['-I%s/%s/swig' % (Dir('.').abspath, d) for d in depends + [module_name]]
    env_python_wrapper.Append(CPPPATH=cpppath,
                            SWIGFLAGS=swigflags)
    env_python_wrapper['SHLIBPREFIX'] = ''

    if env_python_wrapper['PLATFORM'] == 'darwin':
        env_python_wrapper['SHLINKFLAGS'] = '-bundle -flat_namespace -undefined suppress'
        env_python_wrapper['SHLIBSUFFIX'] = '.so'

    python_lib = env_python_wrapper.SharedLibrary(target=('_%s' % module_name),
                                        source=['%s/swig/%s.i' % (module_name, module_name)],
                                        LIBS=depends+[module_name])
    env_python_wrapper.Alias('%s-%s' % (module_name, variant_name), python_lib)


    [Depends(shared_lib, 'lib%s.so' % d) for d in depends]
    Depends(python_lib, shared_lib)

    lib_install_folder = '%s/lib' % (install_path)
    lib_install = env.Install(lib_install_folder, source=shared_lib)

    module_install_folder = '%s/%s' % (install_path, module_name)
    module_install_source = ['%s/swig/%s.py' % (module_name, module_name),
                              Glob('%s/python/*.py' % module_name),
                              python_lib]
    module_install = env.Install(module_install_folder, source=module_install_source)
    return [lib_install, module_install]


modules_with_deps = [('utils', []),
                    ('bootstrap', ['utils']),
                    ('buffers', ['utils']),
                    ('forest_data', ['utils', 'buffers']),
                    ('pipeline', ['utils', 'buffers', 'bootstrap']),
                    ('matrix_features', ['utils', 'bootstrap', 'buffers', 'forest_data', 'pipeline']),
                    ('image_features', ['utils', 'bootstrap', 'buffers', 'forest_data', 'pipeline']),
                    ('try_split', ['utils', 'buffers']),
                    ('should_split', ['utils', 'buffers']),
                    ('splitpoints', ['utils', 'buffers', 'bootstrap', 'forest_data', 'pipeline', 'should_split']),
                    ('classification', ['utils', 'buffers', 'bootstrap', 'forest_data', 'pipeline', 'splitpoints', 'should_split']),
                    ('regression', ['utils', 'buffers', 'bootstrap', 'forest_data', 'pipeline', 'splitpoints', 'should_split']),
                    ('predict', ['utils', 'buffers', 'bootstrap', 'forest_data', 'pipeline', 'splitpoints', 'matrix_features', 'image_features', 'classification', 'regression']),
                    ('learn', ['utils', 'buffers', 'bootstrap', 'forest_data', 'pipeline', 'splitpoints', 'matrix_features', 'image_features', 'classification', 'regression', 'try_split', 'should_split', 'predict'])]

install_dependencies = []
external_libs = ['boost_system', 'boost_thread', 'boost_chrono']
for (module_name, depends) in modules_with_deps:
    module_install_alias = build_rftk_module(env=env,
                                      non_swig_warnings=non_swig_warnings,
                                      variant_name=variant,
                                      module_name=module_name,
                                      depends=depends,
                                      external_libs=external_libs)
    install_dependencies.extend(module_install_alias)

###############################################################################
# Install

# Create the root __init__.py to import all the modules that were built
python_init_filename = '%s/__init__.py' % Dir('#/modules').abspath
print python_init_filename
f = open(python_init_filename, 'w')
python_init_imports = ['import %s' % m[0] for m in modules_with_deps ]
f.write('\n'.join(python_init_imports))
f.close()

# Add the generated __init__.py to install files
init_install = env.Install(install_path, source=python_init_filename)
install_dependencies.append(init_install)

# Alias to install shared libraries and python wrappers
env.Alias('install-%s'%variant, install_dependencies)



###############################################################################
# Unit tests
def build_and_run_unit_tests(test_exec, variant, cpp_files, depends):
    # Build one or more test runners.
    program = env.Program(test_exec,
                          source=cpp_files + ['test_framework/boosttestrunner.cpp'],
                          LIBS=['boost_unit_test_framework', 'boost_system']+depends,
                          CPPPATH=['%s/native' % x for x in depends])
    # Depend on the runner to ensure that it's built before running it - Note: using abspath.
    # Allow just one variant to run
    test_alias_variant = Alias('test-native-%s' % variant, [program], program[0].abspath)
    # Simply required.  Without it, 'test' is never considered out of date.
    AlwaysBuild(test_alias_variant)

    # Run all variants
    test_alias = Alias('test-native', test_alias_variant)
    AlwaysBuild(test_alias)


build_and_run_unit_tests('test-cpp', variant, Glob('*/test/*.cpp'),
                        ['utils','buffers','pipeline', 'bootstrap', 'forest_data',
                        'matrix_features', 'image_features',
                        'splitpoints', 'classification', 'regression',
                        'try_split', 'should_split', 'learn', 'predict'])

