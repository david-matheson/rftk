import distutils.sysconfig
import numpy

###############################################################################
# setup variant specific params
Import('install_path')
Import('variant')
if variant == 'debug':
    ccflags = ['-g', '-O0']
    cppdefines = {'ENABLE_EXCEPTIONS': 1}
elif variant == 'release':
    ccflags = ['-O3']
    cppdefines = {'ENABLE_EXCEPTIONS': 0}

###############################################################################
try:
    numpy_include = numpy.get_include()
except AttributeError:
    numpy_include = numpy.get_numpy_include()

###############################################################################
env = Environment(SWIGFLAGS=['-python', '-c++', '-Werror', '-w490', '-w362'],
                  CPPPATH=[distutils.sysconfig.get_python_inc(), numpy_include],
                  CCFLAGS=ccflags,
                  CPPDEFINES=cppdefines,
                  LIBPATH=[Dir('.').abspath],
                  RPATH=[Dir(install_path).abspath]
                  )
non_swig_warnings = ['-Wall', '-Wextra', '-Weffc++', '-Werror']

###############################################################################
def build_swig_module(env, non_swig_warnings, variant_name, module_name, depends):
    env_module = env.Clone()

    if env_module['PLATFORM'] == 'darwin':
        env_module['SHLINKFLAGS'] = '-dynamiclib -install_name %s/lib%s.dylib' % (Dir(install_path).abspath, module_name)

    env_module.Append(CCFLAGS=non_swig_warnings, CPPPATH=[d for d in depends])
    shared_lib = env_module.SharedLibrary(target=module_name,
                                        source=[Glob('%s/*.cpp' % module_name)],
                                        LIBS=depends)

    env_module.Alias('%s-%s-lib' % (module_name, variant_name), shared_lib)

    env_python_wrapper = env.Clone()
    env_python_wrapper.Append(CPPPATH=[d for d in depends],
                            SWIGFLAGS=['-I%s' % (Dir('.').abspath) ] + ['-I%s/%s' % (Dir('.').abspath, x) for x in depends])
    env_python_wrapper['SHLIBPREFIX'] = ''

    if env_python_wrapper['PLATFORM'] == 'darwin':
        env_python_wrapper['SHLINKFLAGS'] = '-bundle -flat_namespace -undefined suppress'
        env_python_wrapper['SHLIBSUFFIX'] = '.so'

    python_lib = env_python_wrapper.SharedLibrary(target=('_%s' % module_name),
                                        source=['%s/%s.i' % (module_name, module_name)],
                                        LIBS=module_name)
    env_python_wrapper.Alias('%s-%s' % (module_name, variant_name), python_lib)

    [Depends(shared_lib, d) for d in depends]
    Depends(shared_lib, Glob('%s/*.h' % module_name))
    Depends(python_lib, Glob('%s/*.i' % module_name))
    Depends(python_lib, Glob('%s/*.h' % module_name))
    Depends(python_lib, shared_lib)
    Depends('%s/%s.py', python_lib)

    return shared_lib, python_lib, '%s/%s.py' % (module_name, module_name)



files_to_install = []
###############################################################################
# asserts shared lib
asserts_sharedlib, asserts_pylib, asserts_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='asserts',
                                        depends=[])
files_to_install.extend([asserts_sharedlib, asserts_pylib, asserts_py])


###############################################################################
# bootstrap shared lib
bootstrap_sharedlib, bootstrap_pylib, bootstrap_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='bootstrap',
                                        depends=['asserts'])
files_to_install.extend([bootstrap_sharedlib, bootstrap_pylib, bootstrap_py])


###############################################################################
# buffers shared lib
buffers_sharedlib, buffers_pylib, buffers_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='buffers',
                                        depends=['asserts'])
files_to_install.extend([buffers_sharedlib, buffers_pylib, buffers_py])


###############################################################################
# best split shared lib
best_split_sharedlib, best_split_pyib, best_split_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='best_split',
                                        depends=['asserts', 'bootstrap', 'buffers'])
files_to_install.extend([best_split_sharedlib, best_split_pyib, best_split_py])

###############################################################################
# forest data shared lib
forest_data_sharedlib, forest_data_pylib, forest_data_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='forest_data',
                                        depends=['asserts', 'buffers'])
files_to_install.extend([forest_data_sharedlib, forest_data_pylib, forest_data_py])

###############################################################################
# features shared lib
features_sharedlib, features_pylib, features_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='features',
                                        depends=['asserts', 'buffers'])
files_to_install.extend([features_sharedlib, features_pylib, features_py])

###############################################################################
# feature extractors shared lib
feature_extractors_sharedlib, feature_extractors_pylib, feature_extractors_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='feature_extractors',
                                        depends=['asserts', 'bootstrap', 'buffers', 'features'])
files_to_install.extend([feature_extractors_sharedlib, feature_extractors_pylib, feature_extractors_py])

###############################################################################
# predict shared lib
predict_sharedlib, predict_pylib, predict_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='predict',
                                        depends=['asserts', 'buffers', 'forest_data', 'features'])
files_to_install.extend([predict_sharedlib, predict_pylib, predict_py])


###############################################################################
# train shared lib
train_sharedlib, train_pylib, train_py = build_swig_module(env=env,
                                        non_swig_warnings=non_swig_warnings,
                                        variant_name=variant,
                                        module_name='train',
                                        depends=['asserts', 'buffers',
                                                        'bootstrap', 'best_split',
                                                        'forest_data', 'feature_extractors',
                                                        'predict'])
files_to_install.extend([train_sharedlib, train_pylib, train_py])

# Install shared libraries and python wrappers
env.Install(install_path, source=files_to_install)
env.Alias('install-%s'%variant, install_path)
