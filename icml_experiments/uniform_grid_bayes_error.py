import argparse
import cPickle as pickle
import numpy as np

import rftk.native.asserts
import rftk.native.forest_data as forest_data
import rftk.utils.forest as forest_utils
import rftk.utils.predict as predict_utils

import plot_utils
import dist_utils

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Plot accuracy')
    parser.add_argument('-c', '--config_file', help='experiment config file', required=True)
    parser.add_argument('-f', '--in_forest_folder', default="In file", help='', required=True)
    args = parser.parse_args()

    config = __import__(args.config_file)
    data_config = config.get_data_config()

    # Y_probs = None
    previous_data_size = 0
    error_list = []
    for data_size in data_config.data_sizes:
        print "plotting sample count %d" % data_size

        forest_pickle_filename = "%s/forest-%d.pkl" % (args.in_forest_folder, data_size)
        forest = forest_utils.pickle_load_native_forest(forest_pickle_filename)
        predict_forest = predict_utils.MatrixForestPredictor(forest)

        grid_extend = [-4, 14, -6, 8]
        Ux, Uy = np.meshgrid(
                np.linspace(grid_extend[0], grid_extend[1]),
                np.linspace(grid_extend[2], grid_extend[3]),
            )

        X_grid = np.concatenate([
            Ux.reshape((-1,1)), Uy.reshape((-1,1))],
            axis=1)

        Y_probs_new = predict_forest.predict_proba(X_grid)
        error_list.append( np.sum(np.abs(Y_probs_new - [0.5001, 0.4999])))
        print error_list

        previous_data_size = data_size
    pickle.dump(error_list, file("%s/error_from_bayes.pkl" % (args.in_forest_folder), 'wb'))

# [762.29315, 704.89545, 555.31128, 457.9642, 450.35391, 470.61548, 383.36349, 353.03036, 316.62296, 296.31693, 324.02179, 278.15567, 229.95723, 195.52667, 178.50807]
# [524.84332, 754.36707, 489.59195, 331.34641, 388.90039, 253.55989, 180.61203, 286.02969, 159.32814, 179.81058, 184.8028, 122.41485, 67.361443, 46.146362, 65.60498]

# [2712.2929812524785, 2658.074789675883, 2225.4745372122575, 1846.4599314559339, 1660.0768020809155, 1379.7782160691195, 1094.4811304126956, 954.40648217238322, 802.69936049445471, 668.61592702918176, 600.48487145908575, 463.21007120796526, 387.45459924393754, 356.95512728615756, 332.46160503683188, 315.28998084963547]
# [2847.4807426782631, 2660.8030052843637, 2329.1036907203138, 2278.1177632254526, 2103.8189082514459, 1870.4343111510564, 1699.6787225724281, 1593.148979335291, 1384.733556538964, 1280.8049067395914, 1164.75223244835, 1055.5337928224189, 962.10736045240492, 917.8005204015119, 889.87827400202207, 848.18579380643916]

# [1919.3041308186598, 1728.2859079585432, 1197.5528473768702, 1015.6902474599668, 878.51626951915716, 778.61372296300726, 757.9889661045687, 650.25565440292473, 570.76976325503858, 543.06329961242466, 532.61691768904427, 478.31566795232061, 455.95264839510264, 447.77796089531887]
# [2046.7550527437356, 1637.2809855775854, 1336.3178481707555, 1157.6598509302289, 1013.8302586111589, 916.8535816206994, 835.84541554009672, 770.99665549514987, 717.60484845592384, 699.456890206607, 674.64196760960033, 647.45439420357059, 626.04679922277467, 600.44306256225457]

#uniform
# [405.67135726235034, 151.10003337808283, 185.82583150001244, 343.28939229708556, 178.30333922682624, 168.93937653598684, 115.76028689217162, 85.881506484600649, 92.319320918172195, 90.456341116847199, 46.610092230697873, 50.046640035483662, 33.215851617241256, 14.338036961650586, 14.104134864330023, 16.518457352161093]
# [440.24428504708879, 223.80766350760499, 111.71750562797527, 301.54246218437362, 136.7559295050159, 276.69835045122841, 121.25076042523904, 353.89631471107145, 202.02939700669955, 192.97340559483291, 173.73599312263298, 199.70468480010578, 147.84306237792771, 451.08761844594221]